#!/usr/bin/env python3
"""
Script para criar o schema do Sistema de Equival√™ncias UFSM no Supabase
"""

import os
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from werkzeug.security import generate_password_hash

# Configura√ß√µes do Supabase
SUPABASE_HOST = "207.180.254.250"
SUPABASE_PORT = "5432"
SUPABASE_USER = "postgres"
SUPABASE_PASSWORD = "5100a23f8d3196cfce339c43d475b3e0"
SUPABASE_DATABASE = "postgres"

def create_database_if_not_exists():
    """Criar banco de dados equivalencias_ufsm se n√£o existir"""
    try:
        # Conectar ao banco postgres padr√£o
        conn = psycopg2.connect(
            host=SUPABASE_HOST,
            port=SUPABASE_PORT,
            user=SUPABASE_USER,
            password=SUPABASE_PASSWORD,
            database=SUPABASE_DATABASE
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # Verificar se o banco j√° existe
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'equivalencias_ufsm'")
        exists = cursor.fetchone()
        
        if not exists:
            print("üì¶ Criando banco de dados 'equivalencias_ufsm'...")
            cursor.execute("CREATE DATABASE equivalencias_ufsm")
            print("‚úÖ Banco de dados criado com sucesso!")
        else:
            print("‚úÖ Banco de dados 'equivalencias_ufsm' j√° existe")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar banco de dados: {e}")
        return False

def execute_schema_sql():
    """Executar o script SQL para criar o schema"""
    try:
        # Conectar ao banco equivalencias_ufsm
        conn = psycopg2.connect(
            host=SUPABASE_HOST,
            port=SUPABASE_PORT,
            user=SUPABASE_USER,
            password=SUPABASE_PASSWORD,
            database="equivalencias_ufsm"
        )
        cursor = conn.cursor()
        
        print("üîß Executando script de cria√ß√£o do schema...")
        
        # Ler e executar o arquivo SQL
        with open('/home/ubuntu/create_schema.sql', 'r', encoding='utf-8') as file:
            sql_script = file.read()
        
        # Dividir o script em comandos individuais
        commands = [cmd.strip() for cmd in sql_script.split(';') if cmd.strip()]
        
        for i, command in enumerate(commands, 1):
            if command:
                try:
                    cursor.execute(command)
                    print(f"‚úÖ Comando {i}/{len(commands)} executado")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Aviso no comando {i}: {e}")
        
        # Criar usu√°rio admin com senha correta
        print("üë§ Criando usu√°rio administrador...")
        admin_password_hash = generate_password_hash('adm4125')
        
        cursor.execute("""
            INSERT INTO admin (username, password_hash) 
            VALUES (%s, %s)
            ON CONFLICT (username) 
            DO UPDATE SET password_hash = EXCLUDED.password_hash
        """, ('admin', admin_password_hash))
        
        conn.commit()
        print("‚úÖ Usu√°rio admin criado/atualizado com sucesso!")
        
        # Verificar tabelas criadas
        cursor.execute("""
            SELECT table_name, table_type 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('admin', 'equivalencia')
            ORDER BY table_name
        """)
        
        tables = cursor.fetchall()
        print("\nüìä Tabelas criadas:")
        for table_name, table_type in tables:
            print(f"  ‚úÖ {table_name} ({table_type})")
        
        # Verificar dados de exemplo
        cursor.execute("SELECT COUNT(*) FROM equivalencia")
        equiv_count = cursor.fetchone()[0]
        print(f"\nüìù Registros de equival√™ncia: {equiv_count}")
        
        cursor.execute("SELECT COUNT(*) FROM admin")
        admin_count = cursor.fetchone()[0]
        print(f"üë§ Usu√°rios admin: {admin_count}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao executar schema SQL: {e}")
        return False

def test_connection():
    """Testar conex√£o com o Supabase"""
    try:
        print("üîç Testando conex√£o com Supabase...")
        conn = psycopg2.connect(
            host=SUPABASE_HOST,
            port=SUPABASE_PORT,
            user=SUPABASE_USER,
            password=SUPABASE_PASSWORD,
            database="equivalencias_ufsm"
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT version()")
        version = cursor.fetchone()[0]
        print(f"‚úÖ Conex√£o estabelecida! PostgreSQL: {version}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando cria√ß√£o do schema no Supabase...")
    print("=" * 60)
    
    # Passo 1: Criar banco de dados
    if not create_database_if_not_exists():
        print("‚ùå Falha ao criar banco de dados. Abortando.")
        return
    
    print()
    
    # Passo 2: Executar schema SQL
    if not execute_schema_sql():
        print("‚ùå Falha ao criar schema. Abortando.")
        return
    
    print()
    
    # Passo 3: Testar conex√£o final
    if test_connection():
        print("\nüéâ Schema criado com sucesso no Supabase!")
        print("=" * 60)
        print("üìã Resumo:")
        print("  üêò Banco: equivalencias_ufsm")
        print("  üìä Tabelas: admin, equivalencia")
        print("  üë§ Usu√°rio: admin")
        print("  üîê Senha: adm4125")
        print("  üåê Host: 207.180.254.250:5432")
        print("=" * 60)
    else:
        print("‚ùå Falha no teste de conex√£o final.")

if __name__ == "__main__":
    main()

